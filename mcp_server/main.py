# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:01:05+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    BtcerCertificatePostRequest,
    BtcerCertificatePostResponse,
    BtcerCertificatePostResponse1,
    BtcerCertificatePostResponse2,
    BtcerCertificatePostResponse3,
    BtcerCertificatePostResponse4,
    BtcerCertificatePostResponse5,
    BtcerCertificatePostResponse6,
    DtcerCertificatePostRequest,
    DtcerCertificatePostResponse,
    DtcerCertificatePostResponse1,
    DtcerCertificatePostResponse2,
    DtcerCertificatePostResponse3,
    DtcerCertificatePostResponse4,
    DtcerCertificatePostResponse5,
    DtcerCertificatePostResponse6,
    EwcerCertificatePostRequest,
    EwcerCertificatePostResponse,
    EwcerCertificatePostResponse1,
    EwcerCertificatePostResponse2,
    EwcerCertificatePostResponse3,
    EwcerCertificatePostResponse4,
    EwcerCertificatePostResponse5,
    EwcerCertificatePostResponse6,
    ObcerCertificatePostRequest,
    ObcerCertificatePostResponse,
    ObcerCertificatePostResponse1,
    ObcerCertificatePostResponse2,
    ObcerCertificatePostResponse3,
    ObcerCertificatePostResponse4,
    ObcerCertificatePostResponse5,
    ObcerCertificatePostResponse6,
    RacerCertificatePostRequest,
    RacerCertificatePostResponse,
    RacerCertificatePostResponse1,
    RacerCertificatePostResponse2,
    RacerCertificatePostResponse3,
    RacerCertificatePostResponse4,
    RacerCertificatePostResponse5,
    RacerCertificatePostResponse6,
    RscerCertificatePostRequest,
    RscerCertificatePostResponse,
    RscerCertificatePostResponse1,
    RscerCertificatePostResponse2,
    RscerCertificatePostResponse3,
    RscerCertificatePostResponse4,
    RscerCertificatePostResponse5,
    RscerCertificatePostResponse6,
    ShcerCertificatePostRequest,
    ShcerCertificatePostResponse,
    ShcerCertificatePostResponse1,
    ShcerCertificatePostResponse2,
    ShcerCertificatePostResponse3,
    ShcerCertificatePostResponse4,
    ShcerCertificatePostResponse5,
    ShcerCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict Punjab (http://edistrict.punjabgovt.gov.in) is the online service delivery portal for Punjab State Govt. Certain documents issued by it (e.g. Residence, SC/ST, OBC Certificates etc) can be pulled into citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Punjab State eGovernance Society, Punjab',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/edistrictpb/v3'}],
)


@app.post(
    '/btcer/certificate',
    description=""" API to verify Birth Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def btcer(body: BtcerCertificatePostRequest = None):
    """
    Birth Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dtcer/certificate',
    description=""" API to verify Death Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dtcer(body: DtcerCertificatePostRequest = None):
    """
    Death Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ewcer/certificate',
    description=""" API to verify Economically Weaker Section Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ewcer(body: EwcerCertificatePostRequest = None):
    """
    Economically Weaker Section Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/obcer/certificate',
    description=""" API to verify OBC Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def obcer(body: ObcerCertificatePostRequest = None):
    """
    OBC Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/racer/certificate',
    description=""" API to verify Rural Area Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def racer(body: RacerCertificatePostRequest = None):
    """
    Rural Area Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rscer/certificate',
    description=""" API to verify Residence Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rscer(body: RscerCertificatePostRequest = None):
    """
    Residence Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/shcer/certificate',
    description=""" API to verify SC/ST  Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def shcer(body: ShcerCertificatePostRequest = None):
    """
    SC/ST  Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
